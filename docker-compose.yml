services:
  mongo:
    # https://ginkcode.com/post/how-to-set-up-mongodb-with-replica-set-via-docker-compose
    build:
      context: docker
      dockerfile: mongo.Dockerfile
    container_name: mongodb-replicaset
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27017:27017
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017 --quiet --logpath /dev/null
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'127.0.0.1:27017'}]}) }" | mongosh --port 27017 -u root -p root --authenticationDatabase admin
      interval: 5s
      timeout: 15s
      start_period: 15s
      retries: 10
    volumes:
      - data:/data/db
    networks:
      - webnet

  user:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - SERVICE_NAME=@peerprep/user-service
        - SERVICE_DIRECTORY=services/user-service
    container_name: user
    restart: always
    environment:
      - PORT=${VITE_USER_SERVICE_PORT}
    ports:
      - ${VITE_USER_SERVICE_PORT}:${VITE_USER_SERVICE_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${VITE_USER_SERVICE_PORT}/status"]
      interval: 5s
      timeout: 15s
      start_period: 15s
      retries: 10
    depends_on:
      - mongo
    networks:
      - webnet

  questions:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - SERVICE_NAME=@peerprep/questions-service
        - SERVICE_DIRECTORY=services/questions-service
    container_name: questions
    restart: always
    environment:
      - PORT=${VITE_QUESTION_SERVICE_PORT}
    ports:
      - ${VITE_QUESTION_SERVICE_PORT}:${VITE_QUESTION_SERVICE_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${VITE_QUESTION_SERVICE_PORT}/status"]
      interval: 5s
      timeout: 15s
      start_period: 15s
      retries: 10
    depends_on:
      - mongo
    networks:
      - webnet

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - SERVICE_NAME=peerprep
        - SERVICE_DIRECTORY=apps/peerprep
    container_name: frontend
    restart: always
    environment:
      - PORT=${VITE_PEERPREP_FRONTEND_PORT}
    ports:
      - ${VITE_PEERPREP_FRONTEND_PORT}:${VITE_PEERPREP_FRONTEND_PORT}
    depends_on:
      - mongo
      - user
      - questions
    networks:
      - webnet

  admin-portal:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - SERVICE_NAME=@peerprep/admin-portal
        - SERVICE_DIRECTORY=apps/admin-portal
    container_name: admin-portal
    restart: always
    environment:
      - PORT=${VITE_PEERPREP_QUESTION_SPA_PORT}
    ports:
      - ${VITE_PEERPREP_QUESTION_SPA_PORT}:${VITE_PEERPREP_QUESTION_SPA_PORT}
    depends_on:
      - mongo
      - user
      - questions
    networks:
      - webnet

volumes:
  data:

networks:
  webnet:
